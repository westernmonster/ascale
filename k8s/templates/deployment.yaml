apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.global.name }}
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ .Values.global.name }}
    heritage: {{ .Release.Service }}
    release: {{ .Values.global.name }}
    platform: {{ .Values.global.platform }}
    type: {{ .Values.global.type }}
    gitVersion: {{ .Values.global.gitVersion }}
spec:
  replicas: {{ .Values.server.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.global.name }}
      release: {{ .Release.Name }}
      component: server
  template:
    metadata:
      labels:
        app: {{ .Values.global.name }}
        release: {{ .Release.Name }}
        component: server
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
    spec:
      terminationGracePeriodSeconds: 10
      dnsPolicy: ClusterFirst
      securityContext:
        fsGroup: 1000
      containers:
        - name: {{ .Values.global.name }}
          image: "{{ default .Values.global.image .Values.server.image }}"
          env:
            {{- if .Values.global.googleCredential }}
            - name: GOOGLE_APPLICATION_CREDENTIALS
              value: /var/secrets/google/key.json
            {{- end }}
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            {{- include "app.exEnv" .Values.server | nindent 12 }}
          ports:
            - containerPort: 8000
              name: http
          livenessProbe:
            httpGet:
              path: /monitor/ping
              port: 8000
            initialDelaySeconds: 5
            periodSeconds: 8
            timeoutSeconds: 2
          volumeMounts:
            - name: config-volume
              mountPath: /go/bin/config
              readOnly: true
            {{- if .Values.global.googleCredential }}
            - name: google-cloud-key
              mountPath: /var/secrets/google
            {{- end }}
      volumes:
        - name: config-volume
          configMap:
            name: acesoconf
        {{- if .Values.global.googleCredential }}
        - name: google-cloud-key
          secret:
            secretName: pubsub-key
        {{- end }}
